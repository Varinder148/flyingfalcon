{"version":3,"sources":["redux/player/player.type.js","redux/game/game.type.js","redux/game/game.utils.js","redux/game/game.reducer.js","redux/player/player.reducer.js","redux/rootReducer.js","redux/store.js","redux/game/game.action.js","redux/player/player.action.js","components/navbarMenu/navbarMenu.component.js","components/header/header.component.js","redux/game/game.selector.js","redux/player/player.selector.js","components/planetSelector/planetSelector.component.js","components/vehicleSelector/vehicleSelector.component.js","components/selectionHolder/selectionHolder.component.js","components/scoreDisplay/scoreDisplay.component.js","components/msgBox/msgBox.component.js","pages/gamePage/gamepage.page.js","App.js","reportWebVitals.js","index.js"],"names":["playerTypes","ADD_PLANET","ADD_VEHICLE","RESET_PLAYER","gameTypes","START_FETCHING","REQUEST_SUCCESS","REQUEST_FAIL","FILTER_PLANETS","DISABLE_CORRESPONDING_VEHICLES","CALCULATE_VEHICLE_COUNT","UPDATE_RESULT","RESET_GAME","filterPlanetsUtil","origPlanets","playerPlanetsObject","playerPlanets","Object","values","filter","origPlanet","find","playerPlanet","name","disableVehiclesUtil","selectorId","planetBeingSelected","filteredVehicles","origVehicles","availableVehicleCount","VehiclesThatCanReachThisPlanet","map","vehicle","isDisabled","max_distance","distance","vehicleCountFound","countVehicle","disabled","calculateVehicleCountUtil","playerSelectedVehicles","res","forEach","origVehicle","numberOfVehiclesFound","count","total_no","length","push","INITIAL_STATE","token","value","error","isFetching","planets","vehicles","filteredPlanets","result","gameReducer","state","action","type","requestType","payload","msg","playerVehicles","selectedPlanets","selectedVehicles","playerReducer","rootReducer","combineReducers","game","player","middlewares","thunk","store","createStore","applyMiddleware","startFetch","fetchSuccess","fetchFail","loadGame","dispatch","a","axios","post","data","get","addPlanetStart","planet","addPlanet","selectedPlanetsValueFromStore","getState","disableCorrespondingVehicles","addVehicleStart","addVehicle","calculateVehicleCount","mapObjectsToNamesUtil","selectedObject","object","resetFullGame","connect","className","onClick","Header","selectGame","selectPlanets","createSelector","selectVehicles","selectResult","selectFilteredPlanets","selectFilteredVehicles","selectAvailableVehicleCount","vehicleCount","selectPlayer","selectPlayerSelectedPlanets","selectPlayerSelectedVehicles","selectTimeTaken","calculateTimeTaken","planetsObject","vehiclesObject","planetKeys","keys","totalTime","planetKey","speed","timeTakenByThisSelectionPair","mapStateToProps","createStructuredSelector","showVehicles","setShowVehicles","useEffect","planetsValue","onChange","e","preventDefault","JSON","parse","target","stringify","defaultValue","currVehicle","vehicleChangeHandler","vehiclesValue","findCount","foundVehicle","checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop","idx","id","checked","htmlFor","others","useState","includes","launchSearchAsync","planetsArray","vehiclesArray","requestBody","planet_names","vehicle_names","response","responseMsg","status","planet_name","exact","path","component","Gamepage","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","baseURL","headers","common","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.ec20d4bf.chunk.js","sourcesContent":["const playerTypes = {\r\n  ADD_PLANET :\"ADD_PLANET\",\r\n  ADD_VEHICLE:\"ADD_VEHICLE\",\r\n  RESET_PLAYER:\"RESET_PLAYER\"\r\n}\r\n\r\nexport default playerTypes","const gameTypes = {\r\n  START_FETCHING: \"START_FETCHING\",\r\n  REQUEST_SUCCESS: \"REQUEST_SUCCESS\",\r\n  REQUEST_FAIL: \"REQUEST_FAIL\",\r\n  FILTER_PLANETS: \"FILTER_PLANETS\",\r\n  DISABLE_CORRESPONDING_VEHICLES: \"DISABLE_CORRESPONDING_VEHICLES\",\r\n  CALCULATE_VEHICLE_COUNT: \"CALCULATE_VEHICLE_COUNT\",\r\n  UPDATE_RESULT:\"UPDATE_RESULT\",\r\n  RESET_GAME:\"RESET_GAME\"\r\n};\r\n\r\nexport default gameTypes;\r\n","export const filterPlanetsUtil = (origPlanets, playerPlanetsObject) => {\r\n  let playerPlanets = Object.values(playerPlanetsObject);\r\n  let filteredRes = origPlanets.filter((origPlanet) => {\r\n    return !playerPlanets.find(\r\n      (playerPlanet) => playerPlanet.name === origPlanet.name\r\n    );\r\n  });\r\n  return filteredRes;\r\n};\r\n\r\nexport const disableVehiclesUtil = (\r\n  selectorId,\r\n  planetBeingSelected,\r\n  filteredVehicles,\r\n  origVehicles,\r\n  availableVehicleCount\r\n) => {\r\n  let VehiclesThatCanReachThisPlanet = origVehicles.map((vehicle) => {\r\n    let isDisabled = vehicle.max_distance < planetBeingSelected.distance;\r\n\r\n    let vehicleCountFound = availableVehicleCount.find(\r\n      (countVehicle) => countVehicle.name === vehicle.name\r\n    );\r\n\r\n    isDisabled = isDisabled || vehicleCountFound <= 0;\r\n\r\n    return { ...vehicle, disabled: isDisabled };\r\n  });\r\n\r\n  return { ...filteredVehicles, [selectorId]: VehiclesThatCanReachThisPlanet };\r\n};\r\n\r\nexport const calculateVehicleCountUtil = (\r\n  playerSelectedVehicles,\r\n  origVehicles\r\n) => {\r\n  let res = [];\r\n\r\n  playerSelectedVehicles = Object.values(playerSelectedVehicles);\r\n\r\n  origVehicles.forEach((origVehicle) => {\r\n    let numberOfVehiclesFound = playerSelectedVehicles.filter(\r\n      (vehicle) => origVehicle.name === vehicle.name\r\n    );\r\n    let count = origVehicle.total_no - numberOfVehiclesFound.length;\r\n    count = count <= 0 ? 0 : count;\r\n    let vehicle = { name: origVehicle.name, total_no: count };\r\n    res.push(vehicle);\r\n  });\r\n\r\n  return res;\r\n};\r\n","import gameTypes from \"./game.type\";\r\nimport {\r\n  disableVehiclesUtil,\r\n  filterPlanetsUtil,\r\n  calculateVehicleCountUtil,\r\n} from \"./game.utils\";\r\n\r\nconst INITIAL_STATE = {\r\n  token: { value: \"\", error: \"\", isFetching: false },\r\n  planets: { value: [], error: \"\", isFetching: false },\r\n  vehicles: { value: [], error: \"\", isFetching: false },\r\n  filteredPlanets: {},\r\n  filteredVehicles: {},\r\n  availableVehicleCount: [],\r\n  result: { value: \"\", error: \"\", isFetching: false },\r\n};\r\n\r\nconst gameReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case gameTypes.START_FETCHING:\r\n      return {\r\n        ...state,\r\n        [action.requestType]: {\r\n          ...state[action.requestType],\r\n          isFetching: true,\r\n        },\r\n      };\r\n\r\n    case gameTypes.REQUEST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        [action.requestType]: {\r\n          ...state[action.requestType],\r\n          isFetching: false,\r\n          value: action.payload,\r\n        },\r\n      };\r\n\r\n    case gameTypes.REQUEST_FAIL:\r\n      return {\r\n        ...state,\r\n        [action.requestType]: {\r\n          ...state[action.requestType],\r\n          isFetching: false,\r\n          error: action.msg,\r\n        },\r\n      };\r\n\r\n    case gameTypes.FILTER_PLANETS:\r\n      return {\r\n        ...state,\r\n        filteredPlanets: filterPlanetsUtil(state.planets.value, action.payload),\r\n      };\r\n\r\n    case gameTypes.DISABLE_CORRESPONDING_VEHICLES:\r\n      return {\r\n        ...state,\r\n        filteredVehicles: disableVehiclesUtil(\r\n          action.selectorId,\r\n          action.payload,\r\n          state.filteredVehicles,\r\n          state.vehicles.value,\r\n          state.availableVehicleCount\r\n        ),\r\n      };\r\n\r\n    case gameTypes.CALCULATE_VEHICLE_COUNT:\r\n      return {\r\n        ...state,\r\n        availableVehicleCount: calculateVehicleCountUtil(\r\n          action.playerVehicles,\r\n          state.vehicles.value\r\n        ),\r\n      };\r\n\r\n    case gameTypes.RESET_GAME:\r\n      return INITIAL_STATE;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default gameReducer;\r\n","import playerTypes from \"./player.type\";\r\n\r\nconst INITIAL_STATE = {\r\n  selectedPlanets: {},\r\n  selectedVehicles: {},\r\n};\r\n\r\nconst playerReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case playerTypes.ADD_PLANET:\r\n      return {\r\n        ...state,\r\n        selectedPlanets: {\r\n          ...state.selectedPlanets,\r\n          [action.selectorId]: action.payload,\r\n        },\r\n      };\r\n\r\n    case playerTypes.ADD_VEHICLE:\r\n      return {\r\n        ...state,\r\n        selectedVehicles: {\r\n          ...state.selectedVehicles,\r\n          [action.selectorId]: action.payload,\r\n        },\r\n      };\r\n\r\n    case playerTypes.RESET_PLAYER:\r\n      return INITIAL_STATE\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default playerReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport gameReducer from \"./game/game.reducer\";\r\nimport playerReducer from \"./player/player.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n  player: playerReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { logger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") middlewares.push(logger);\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n","import axios from \"axios\";\r\n\r\nimport gameTypes from \"./game.type\";\r\n\r\nexport const startFilteringPlanets = (playerPlanets) => ({\r\n  type: gameTypes.FILTER_PLANETS,\r\n  payload: playerPlanets,\r\n});\r\n\r\nexport const startFetch = (requestType) => ({\r\n  type: gameTypes.START_FETCHING,\r\n  requestType: requestType,\r\n});\r\n\r\nexport const fetchSuccess = (requestType, payload) => ({\r\n  type: gameTypes.REQUEST_SUCCESS,\r\n  payload: payload,\r\n  requestType: requestType,\r\n});\r\n\r\nexport const fetchFail = (requestType, msg) => ({\r\n  type: gameTypes.REQUEST_FAIL,\r\n  requestType: requestType,\r\n  msg: msg,\r\n});\r\n\r\nexport const disableCorrespondingVehicles = (selectorId, planet) => ({\r\n  type: gameTypes.DISABLE_CORRESPONDING_VEHICLES,\r\n  payload: planet,\r\n  selectorId: selectorId,\r\n});\r\n\r\nexport const calculateVehicleCount = (selectorId, vehicle, playerVehicles) => ({\r\n  type: gameTypes.CALCULATE_VEHICLE_COUNT,\r\n  payload: vehicle,\r\n  selectorId: selectorId,\r\n  playerVehicles: playerVehicles,\r\n});\r\n\r\nexport const resetGame = () => ({\r\n  type: gameTypes.RESET_GAME,\r\n});\r\n\r\nexport const updateResult = (msg, error) => ({\r\n  type: gameTypes.UPDATE_RESULT,\r\n  payload: msg,\r\n  error: error,\r\n});\r\n\r\nconst fetchTokenAsync = () => {\r\n  return async (dispatch) => {\r\n    let requestType = \"token\";\r\n\r\n    try {\r\n      dispatch(startFetch(requestType));\r\n      let res = await axios.post(\"/token\");\r\n      dispatch(fetchSuccess(requestType, res.data.token));\r\n    } catch {\r\n      dispatch(\r\n        fetchFail(requestType, \"Something went wrong while fetching token\")\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nconst fetchPlanetsAsync = () => {\r\n  return async (dispatch) => {\r\n    let requestType = \"planets\";\r\n    try {\r\n      dispatch(startFetch(requestType));\r\n      let res = await axios.get(\"/planets\");\r\n      dispatch(fetchSuccess(requestType, res.data));\r\n    } catch {\r\n      dispatch(\r\n        fetchFail(requestType, \"Something went wrong while fetching Planets\")\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nconst fetchVehiclesAsync = () => {\r\n  return async (dispatch) => {\r\n    let requestType = \"vehicles\";\r\n    try {\r\n      dispatch(startFetch(requestType));\r\n      let res = await axios.get(\"/vehicles\");\r\n      dispatch(fetchSuccess(requestType, res.data));\r\n    } catch {\r\n      dispatch(\r\n        fetchFail(requestType, \"Something went wrong while fetching Vehicles.\")\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport const loadGame = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchTokenAsync());\r\n    dispatch(fetchPlanetsAsync());\r\n    dispatch(fetchVehiclesAsync());\r\n  };\r\n};\r\n","import playerTypes from \"./player.type\";\r\nimport { store } from \"../store\";\r\nimport {\r\n  startFilteringPlanets,\r\n  disableCorrespondingVehicles,\r\n  calculateVehicleCount,\r\n  resetGame,\r\n  loadGame,\r\n  startFetch,\r\n  fetchSuccess,\r\n  fetchFail,\r\n} from \"../game/game.action\";\r\nimport axios from \"axios\";\r\n\r\nexport const addPlanet = (selectorId, planet) => ({\r\n  type: playerTypes.ADD_PLANET,\r\n  payload: planet,\r\n  selectorId: selectorId,\r\n});\r\n\r\nexport const addVehicle = (selectorId, vehicle) => ({\r\n  type: playerTypes.ADD_VEHICLE,\r\n  payload: vehicle,\r\n  selectorId: selectorId,\r\n});\r\n\r\nexport const resetPlayer = () => ({\r\n  type: playerTypes.RESET_PLAYER,\r\n});\r\n\r\nexport const addPlanetStart = (selectorId, planet) => {\r\n  return (dispatch) => {\r\n    dispatch(addPlanet(selectorId, planet));\r\n    let selectedPlanetsValueFromStore = store.getState().player.selectedPlanets;\r\n    dispatch(startFilteringPlanets(selectedPlanetsValueFromStore));\r\n    dispatch(disableCorrespondingVehicles(selectorId, planet));\r\n  };\r\n};\r\n\r\nexport const addVehicleStart = (selectorId, vehicle) => {\r\n  return (dispatch) => {\r\n    dispatch(addVehicle(selectorId, vehicle));\r\n    dispatch(\r\n      calculateVehicleCount(\r\n        selectorId,\r\n        vehicle,\r\n        store.getState().player.selectedVehicles\r\n      )\r\n    );\r\n  };\r\n};\r\n\r\nexport const launchSearchAsync = (playerPlanets, playerVehicles) => {\r\n  return async (dispatch) => {\r\n    //resetting previous error and success messages\r\n    dispatch(fetchFail(\"result\", \"\"));\r\n    dispatch(fetchSuccess(\"result\", \"\"));\r\n    dispatch(startFetch(\"result\"));\r\n\r\n    let state = store.getState();\r\n    let token = state.game.token.value;\r\n    let { selectedPlanets, selectedVehicles } = state.player;\r\n\r\n    let planetsArray = mapObjectsToNamesUtil(Object.values(selectedPlanets));\r\n    let vehiclesArray = mapObjectsToNamesUtil(Object.values(selectedVehicles));\r\n\r\n    if (planetsArray.length !== 4 || vehiclesArray.length !== 4) {\r\n      dispatch(fetchFail(\"result\", \"Please select 4 planets and 4 vehicles\"));\r\n      return;\r\n    }\r\n    if (vehiclesArray.find((vehicle)=>vehicle===\"\")) {\r\n      dispatch(fetchFail(\"result\", \"Please select 4 vehicles\"));\r\n      return;\r\n    }\r\n\r\n    let requestBody = {\r\n      token: token,\r\n      planet_names: planetsArray,\r\n      vehicle_names: vehiclesArray,\r\n    };\r\n\r\n    try {\r\n      let response = await axios.post(\"/find\", requestBody);\r\n      let responseMsg = \"\";\r\n      if (response.data.status === \"success\")\r\n        responseMsg = \"Congratulations! You found the queen on \" + response.data.planet_name + \".\";\r\n      else responseMsg = \"Shoot! It's a miss.\";\r\n      dispatch(fetchSuccess(\"result\", responseMsg));\r\n    } catch (error) {\r\n      dispatch(fetchFail(\"result\", \"Something went wrong. Please try again\"));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapObjectsToNamesUtil = (selectedObject) => {\r\n  return selectedObject.map((object) => object.name);\r\n};\r\n\r\nexport const resetFullGame = () => {\r\n  return (dispatch) => {\r\n    dispatch(resetGame());\r\n    dispatch(resetPlayer());\r\n    dispatch(loadGame());\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { resetFullGame } from \"../../redux/player/player.action\";\r\nimport \"./navbarMenu.style.scss\";\r\n\r\n// Menu in the header\r\nconst NavbarMenu = ({ resetFullGame }) => {\r\n  return (\r\n    <ul className=\"navbar\">\r\n      <li onClick={resetFullGame}>Reset</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  resetFullGame: () => dispatch(resetFullGame()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(NavbarMenu);\r\n","import React from \"react\";\r\nimport \"./header.style.scss\";\r\n\r\nimport NavbarMenu from \"../navbarMenu/navbarMenu.component\";\r\n\r\nconst Header = () => (\r\n  <div className=\"header-wrapper\">\r\n    <header>\r\n      <h2 className=\"logo\">Flying Falcon</h2>\r\n      <NavbarMenu />\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default Header;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectGame = (state) => state.game;\r\n\r\nexport const selectPlanets = createSelector(\r\n  [selectGame],\r\n  (game) => game.planets\r\n);\r\n\r\nexport const selectVehicles = createSelector(\r\n  [selectGame],\r\n  (game) => game.vehicles\r\n);\r\n\r\nexport const selectResult = createSelector(\r\n  [selectGame],\r\n  game => game.result\r\n)\r\n\r\nexport const selectFilteredPlanets = createSelector(\r\n  [selectGame],\r\n  (game) => game.filteredPlanets\r\n);\r\n\r\nexport const selectFilteredVehicles = createSelector(\r\n  [selectGame],\r\n  (game) => game.filteredVehicles\r\n);\r\n\r\nexport const selectVehicleCount = createSelector(\r\n  [selectGame],\r\n  (game) => game.vehicleCount\r\n);\r\n\r\nexport const selectAvailableVehicleCount = createSelector(\r\n  [selectGame],\r\n  (game) => game.availableVehicleCount\r\n);\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectPlayer = (state) => state.player;\r\n\r\nexport const selectPlayerSelectedPlanets = createSelector(\r\n  [selectPlayer],\r\n  (player) => player.selectedPlanets\r\n);\r\n\r\nexport const selectPlayerSelectedVehicles = createSelector(\r\n  [selectPlayer],\r\n  (player) => player.selectedVehicles\r\n);\r\n\r\nexport const selectTimeTaken = createSelector([selectPlayer], (player) =>\r\n  calculateTimeTaken(player.selectedPlanets, player.selectedVehicles)\r\n);\r\n\r\nconst calculateTimeTaken = (planetsObject, vehiclesObject) => {\r\n  const planetKeys = Object.keys(planetsObject);\r\n  let totalTime = 0;\r\n\r\n  planetKeys.forEach((planetKey) => {\r\n    let distance = 0;\r\n    let speed = 1;\r\n    if (planetsObject[planetKey] && vehiclesObject[planetKey]) {\r\n      distance = planetsObject[planetKey].distance;\r\n      speed = vehiclesObject[planetKey].speed;\r\n    }\r\n\r\n    let timeTakenByThisSelectionPair = distance / speed;\r\n\r\n    totalTime += timeTakenByThisSelectionPair\r\n      ? timeTakenByThisSelectionPair\r\n      : 0;\r\n  });\r\n\r\n  return totalTime;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport \"./planetSelector.style.scss\";\r\n\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { selectFilteredPlanets } from \"../../redux/game/game.selector\";\r\nimport { selectPlayerSelectedPlanets } from \"../../redux/player/player.selector\";\r\n\r\nimport {\r\n  addPlanetStart,\r\n  addVehicleStart,\r\n} from \"../../redux/player/player.action\";\r\n\r\n// Dropdown to select planets\r\nconst PlanetSelector = ({\r\n  selectorId,\r\n  showVehicles,\r\n  setShowVehicles,\r\n  selectPlanets,\r\n  selectFilteredPlanets,\r\n  selectPlayerSelectedPlanets,\r\n  addPlanet,\r\n  addVehicle,\r\n}) => {\r\n  useEffect(() => {\r\n    if (selectPlayerSelectedPlanets[selectorId]) {\r\n      setShowVehicles(true);\r\n    } else {\r\n      setShowVehicles(false);\r\n    }\r\n  }, [showVehicles, selectPlayerSelectedPlanets, selectorId, setShowVehicles]);\r\n\r\n  let planetsValue = selectPlanets.value;\r\n\r\n  const selectionChangedHandler = (e) => {\r\n    e.preventDefault();\r\n    if (!showVehicles) {\r\n      setShowVehicles(true);\r\n    }\r\n\r\n    let planet = JSON.parse(e.target.value);\r\n    addPlanet(selectorId, planet);\r\n    addVehicle(selectorId);\r\n  };\r\n\r\n  // switch to selectFilteredPlanets if initial selection is made\r\n  // i.e. if selectFiltered planets is not empty\r\n  if (selectFilteredPlanets.length > 0) {\r\n    planetsValue = selectFilteredPlanets;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <select\r\n        onChange={selectionChangedHandler}\r\n        value={JSON.stringify(selectPlayerSelectedPlanets[selectorId])}\r\n        defaultValue=\"empty\"\r\n      >\r\n        <option disabled value=\"empty\">\r\n          -- Pick a Planet --\r\n        </option>\r\n        {planetsValue.map((planet) => (\r\n          <option key={planet.name} value={JSON.stringify(planet)}>\r\n            {planet.name}\r\n          </option>\r\n        ))}\r\n        {selectPlayerSelectedPlanets[selectorId] ? (\r\n          <option\r\n            value={JSON.stringify(selectPlayerSelectedPlanets[selectorId])}\r\n          >\r\n            {selectPlayerSelectedPlanets[selectorId].name}\r\n          </option>\r\n        ) : null}\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectFilteredPlanets: selectFilteredPlanets,\r\n  selectPlayerSelectedPlanets: selectPlayerSelectedPlanets,\r\n});\r\n\r\n// The empty string in addVehicle will help us normalize count\r\n// in some edge cases. This empty string will become a placeholder\r\n// for playerSelectedVehicle with this instance's selectorId\r\n\r\n// An empty object or null can be used too. But it will complicate filtering later on.\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addPlanet: (selectorId, planet) => {\r\n    dispatch(addPlanetStart(selectorId, planet));\r\n  },\r\n  addVehicle: (selectorId) => dispatch(addVehicleStart(selectorId, \"\")),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanetSelector);\r\n","import \"./vehicleSelector.style.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport {\r\n  selectFilteredVehicles,\r\n  selectAvailableVehicleCount,\r\n} from \"../../redux/game/game.selector\";\r\nimport { selectPlayerSelectedVehicles } from \"../../redux/player/player.selector\";\r\n\r\nimport { addVehicleStart } from \"../../redux/player/player.action\";\r\n\r\nconst VehicleSelector = ({\r\n  selectorId,\r\n  addVehicle,\r\n  selectVehicles,\r\n  selectFilteredVehicles,\r\n  selectPlayerSelectedVehicles,\r\n  selectAvailableVehicleCount,\r\n}) => {\r\n\r\n  const vehicleChangeHandler = (e) => {\r\n    let currVehicle = e.target.value;\r\n    addVehicle(selectorId, currVehicle ? JSON.parse(currVehicle) : null);\r\n  };\r\n\r\n  let vehiclesValue = selectVehicles.value;\r\n\r\n  if (selectFilteredVehicles[selectorId]) {\r\n    vehiclesValue = selectFilteredVehicles[selectorId];\r\n  }\r\n\r\n  const findCount = (currVehicle) => {\r\n    let foundVehicle = selectAvailableVehicleCount.find(\r\n      (vehicle) => vehicle.name === currVehicle.name\r\n    );\r\n    return foundVehicle ? foundVehicle.total_no : currVehicle.total_no;\r\n  };\r\n\r\n  const checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop = (vehicle) =>\r\n    (selectPlayerSelectedVehicles[selectorId] &&\r\n      vehicle.name === selectPlayerSelectedVehicles[selectorId].name) ||\r\n    false;\r\n\r\n  return (\r\n    <div className=\"vehicle-menu\">\r\n      {vehiclesValue.map((vehicle, idx) => (\r\n        <div key={vehicle.name}>\r\n          <input\r\n            id={`veh${idx}${selectorId}`}\r\n            type=\"radio\"\r\n            name={`vehicle${selectorId}`}\r\n            value={JSON.stringify(vehicle)}\r\n            checked={\r\n              !vehicle.disabled &&\r\n              checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop(vehicle)\r\n            }\r\n            onChange={vehicleChangeHandler}\r\n            disabled={\r\n              (vehicle.disabled || findCount(vehicle) === 0) &&\r\n              !checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop(\r\n                vehicle\r\n              )\r\n            }\r\n          />\r\n          <label htmlFor={`veh${idx}${selectorId}`}>{`${\r\n            vehicle.name\r\n          } (${findCount(vehicle)})`}</label>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectFilteredVehicles: selectFilteredVehicles,\r\n  selectPlayerSelectedVehicles: selectPlayerSelectedVehicles,\r\n  selectAvailableVehicleCount: selectAvailableVehicleCount,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addVehicle: (selectorId, currVehicle) =>\r\n    dispatch(addVehicleStart(selectorId, currVehicle)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VehicleSelector);\r\n","import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport PlanetSelector from \"../planetSelector/planetSelector.component\";\r\nimport VehicleSelector from \"../vehicleSelector/vehicleSelector.component\";\r\n\r\nimport { selectVehicles, selectPlanets } from \"../../redux/game/game.selector\";\r\n\r\n// wrapper for a single selection pair( planetSelector, vehicleSelector )\r\nconst SelectionHolder = ({ selectVehicles, selectPlanets, ...others }) => {\r\n  //UI related state is maintained in Components\r\n  let [showVehicles, setShowVehicles] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {selectPlanets.value.length !== 0 && (\r\n        <PlanetSelector\r\n          {...others}\r\n          showVehicles={showVehicles}\r\n          setShowVehicles={setShowVehicles}\r\n          selectPlanets={selectPlanets}\r\n        />\r\n      )}\r\n      {selectPlanets.value.length !== 0 && showVehicles && (\r\n        <VehicleSelector {...others} selectVehicles={selectVehicles} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// listening to changes in orig vehicles and planets\r\n// so that this component can re-render and don't lead to\r\n// inconsistencies\r\nconst mapStateToProps = () =>\r\n  createStructuredSelector({\r\n    selectVehicles,\r\n    selectPlanets,\r\n  });\r\n\r\nexport default connect(mapStateToProps)(SelectionHolder);\r\n","import { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectTimeTaken } from \"../../redux/player/player.selector\";\r\n\r\nconst ScoreDisplay = ({ selectTimeTaken }) => (\r\n  <>\r\n    Time Taken:\r\n    {selectTimeTaken ? selectTimeTaken : 0}\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectTimeTaken,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ScoreDisplay);\r\n","import { connect } from \"react-redux\";\r\nimport \"./msgBox.style.scss\";\r\nimport { selectResult } from \"../../redux/game/game.selector\";\r\n\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\n// The box below the Header\r\nconst MsgBox = ({ selectResult }) => (\r\n  <div className={`msg ${selectResult.error === \"\" && selectResult.value.includes(\"found\") ? \"green\" : \"red\"}`}>\r\n    {selectResult.error !== \"\" ? selectResult.error : selectResult.value}\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectResult,\r\n});\r\nexport default connect(mapStateToProps)(MsgBox);\r\n","import \"./gamepage.style.scss\";\r\nimport SelectionHolder from \"../../components/selectionHolder/selectionHolder.component\";\r\nimport ScoreDisplay from \"../../components/scoreDisplay/scoreDisplay.component\";\r\nimport {\r\n  launchSearchAsync,\r\n  resetFullGame,\r\n} from \"../../redux/player/player.action\";\r\nimport { connect } from \"react-redux\";\r\nimport MsgBox from \"../../components/msgBox/msgBox.component\";\r\nimport { selectResult } from \"../../redux/game/game.selector\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nconst Gamepage = ({ selectResult, launchSearchAsync, resetFullGame }) => {\r\n  const selectorIds = [1, 2, 3, 4];\r\n\r\n  return (\r\n    <>\r\n      <MsgBox />\r\n      <div className=\"gamepage\">\r\n        <div className=\"selectors\">\r\n          {selectorIds.map((selectorId) => (\r\n            <div key={selectorId}>\r\n              <SelectionHolder selectorId={selectorId} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"score-display\">\r\n          <ScoreDisplay />\r\n        </div>\r\n        <button\r\n          className=\"submit\"\r\n          onClick={launchSearchAsync}\r\n          disabled={selectResult.isFetching}\r\n        >\r\n          Deploy the troops\r\n        </button>\r\n        {(selectResult.value !== \"\") && (\r\n          <button className=\"submit\" onClick={resetFullGame}>\r\n            New Game?\r\n          </button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  launchSearchAsync: () => dispatch(launchSearchAsync()),\r\n  resetFullGame: () => dispatch(resetFullGame()),\r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectResult,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);\r\n","import { connect } from \"react-redux\";\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/header/header.component\";\r\nimport Gamepage from \"./pages/gamePage/gamepage.page\";\r\nimport { loadGame } from \"./redux/game/game.action\";\r\n\r\nconst App = ({ loadGame }) => {\r\n  loadGame();\r\n  return (\r\n    <>\r\n      <Header />\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Gamepage} />\r\n          <Route exact path=\"*\" render={()=><h2>You seem to be lost,me friend</h2>} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  loadGame: () => dispatch(loadGame()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport axios from \"axios\";\n\nimport { store } from \"./redux/store\";\n\naxios.defaults.baseURL = \"https://findfalcone.herokuapp.com/\";\naxios.defaults.headers.common[\"Accept\"] = \"application/json\";\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}