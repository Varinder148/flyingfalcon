{"version":3,"sources":["redux/game/game.type.js","redux/game/game.utils.js","redux/game/game.reducer.js","redux/player/player.type.js","redux/player/player.reducer.js","redux/rootReducer.js","redux/store.js","redux/game/game.action.js","redux/player/player.action.js","components/navbarMenu/navbarMenu.component.js","components/header/header.component.js","components/footer/footer.component.js","redux/game/game.selector.js","redux/player/player.selector.js","components/planetSelector/planetSelector.component.js","components/vehicleSelector/vehicleSelector.component.js","components/selectionHolder/selectionHolder.component.js","components/scoreDisplay/scoreDisplay.component.js","components/msgBox/msgBox.component.js","pages/gamePage/gamepage.page.js","pages/homePage/homepage.page.js","App.js","reportWebVitals.js","index.js"],"names":["gameTypes","START_FETCHING","REQUEST_SUCCESS","REQUEST_FAIL","FILTER_PLANETS","DISABLE_CORRESPONDING_VEHICLES","CALCULATE_VEHICLE_COUNT","UPDATE_RESULT","RESET_GAME","filterPlanetsUtil","origPlanets","playerPlanetsObject","playerPlanets","Object","values","filter","origPlanet","find","playerPlanet","name","disableVehiclesUtil","selectorId","planetBeingSelected","filteredVehicles","origVehicles","availableVehicleCount","VehiclesThatCanReachThisPlanet","map","vehicle","isDisabled","max_distance","distance","vehicleCountFound","countVehicle","disabled","calculateVehicleCountUtil","playerSelectedVehicles","res","forEach","origVehicle","numberOfVehiclesFound","count","total_no","length","push","INITIAL_STATE","token","value","error","isFetching","planets","vehicles","filteredPlanets","result","gameReducer","state","action","type","requestType","payload","msg","playerVehicles","playerTypes","ADD_PLANET","ADD_VEHICLE","RESET_PLAYER","selectedPlanets","selectedVehicles","playerReducer","rootReducer","combineReducers","game","player","middlewares","thunk","store","createStore","applyMiddleware","startFetch","fetchSuccess","fetchFail","loadGame","dispatch","a","axios","post","data","get","addPlanetStart","planet","addPlanet","selectedPlanetsValueFromStore","getState","disableCorrespondingVehicles","addVehicleStart","addVehicle","calculateVehicleCount","mapObjectsToNamesUtil","selectedObject","object","resetFullGame","connect","className","onClick","withRouter","history","Footer","selectGame","selectPlanets","createSelector","selectVehicles","selectResult","selectFilteredPlanets","selectFilteredVehicles","selectAvailableVehicleCount","vehicleCount","selectPlayer","selectPlayerSelectedPlanets","selectPlayerSelectedVehicles","selectTimeTaken","calculateTimeTaken","planetsObject","vehiclesObject","planetKeys","keys","totalTime","planetKey","speed","timeTakenByThisSelectionPair","mapStateToProps","createStructuredSelector","showVehicles","setShowVehicles","useEffect","planetsValue","onChange","e","preventDefault","JSON","parse","target","stringify","defaultValue","currVehicle","vehicleChangeHandler","vehiclesValue","findCount","foundVehicle","checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop","idx","id","checked","htmlFor","others","useState","includes","launchSearchAsync","planetsArray","vehiclesArray","requestBody","planet_names","vehicle_names","response","responseMsg","status","planet_name","Homepage","exact","path","component","Gamepage","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","defaults","baseURL","headers","common","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.d82f0bed.chunk.js","sourcesContent":["const gameTypes = {\r\n  START_FETCHING: \"START_FETCHING\",\r\n  REQUEST_SUCCESS: \"REQUEST_SUCCESS\",\r\n  REQUEST_FAIL: \"REQUEST_FAIL\",\r\n  FILTER_PLANETS: \"FILTER_PLANETS\",\r\n  DISABLE_CORRESPONDING_VEHICLES: \"DISABLE_CORRESPONDING_VEHICLES\",\r\n  CALCULATE_VEHICLE_COUNT: \"CALCULATE_VEHICLE_COUNT\",\r\n  UPDATE_RESULT:\"UPDATE_RESULT\",\r\n  RESET_GAME:\"RESET_GAME\"\r\n};\r\n\r\nexport default gameTypes;\r\n","export const filterPlanetsUtil = (origPlanets, playerPlanetsObject) => {\r\n  let playerPlanets = Object.values(playerPlanetsObject);\r\n  let filteredRes = origPlanets.filter((origPlanet) => {\r\n    return !playerPlanets.find(\r\n      (playerPlanet) => playerPlanet.name === origPlanet.name\r\n    );\r\n  });\r\n  return filteredRes;\r\n};\r\n\r\nexport const disableVehiclesUtil = (\r\n  selectorId,\r\n  planetBeingSelected,\r\n  filteredVehicles,\r\n  origVehicles,\r\n  availableVehicleCount\r\n) => {\r\n  let VehiclesThatCanReachThisPlanet = origVehicles.map((vehicle) => {\r\n    let isDisabled = vehicle.max_distance < planetBeingSelected.distance;\r\n\r\n    let vehicleCountFound = availableVehicleCount.find(\r\n      (countVehicle) => countVehicle.name === vehicle.name\r\n    );\r\n\r\n    isDisabled = isDisabled || vehicleCountFound <= 0;\r\n\r\n    return { ...vehicle, disabled: isDisabled };\r\n  });\r\n\r\n  return { ...filteredVehicles, [selectorId]: VehiclesThatCanReachThisPlanet };\r\n};\r\n\r\nexport const calculateVehicleCountUtil = (\r\n  playerSelectedVehicles,\r\n  origVehicles\r\n) => {\r\n  let res = [];\r\n\r\n  playerSelectedVehicles = Object.values(playerSelectedVehicles);\r\n\r\n  origVehicles.forEach((origVehicle) => {\r\n    let numberOfVehiclesFound = playerSelectedVehicles.filter(\r\n      (vehicle) => origVehicle.name === vehicle.name\r\n    );\r\n    let count = origVehicle.total_no - numberOfVehiclesFound.length;\r\n    count = count <= 0 ? 0 : count;\r\n    let vehicle = { name: origVehicle.name, total_no: count };\r\n    res.push(vehicle);\r\n  });\r\n\r\n  return res;\r\n};\r\n","import gameTypes from \"./game.type\";\r\nimport {\r\n  disableVehiclesUtil,\r\n  filterPlanetsUtil,\r\n  calculateVehicleCountUtil,\r\n} from \"./game.utils\";\r\n\r\nconst INITIAL_STATE = {\r\n  token: { value: \"\", error: \"\", isFetching: false },\r\n  planets: { value: [], error: \"\", isFetching: false },\r\n  vehicles: { value: [], error: \"\", isFetching: false },\r\n  filteredPlanets: {},\r\n  filteredVehicles: {},\r\n  availableVehicleCount: [],\r\n  result: { value: \"\", error: \"\", isFetching: false },\r\n};\r\n\r\nconst gameReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case gameTypes.START_FETCHING:\r\n      return {\r\n        ...state,\r\n        [action.requestType]: {\r\n          ...state[action.requestType],\r\n          isFetching: true,\r\n        },\r\n      };\r\n\r\n    case gameTypes.REQUEST_SUCCESS:\r\n      return {\r\n        ...state,\r\n        [action.requestType]: {\r\n          ...state[action.requestType],\r\n          isFetching: false,\r\n          value: action.payload,\r\n        },\r\n      };\r\n\r\n    case gameTypes.REQUEST_FAIL:\r\n      return {\r\n        ...state,\r\n        [action.requestType]: {\r\n          ...state[action.requestType],\r\n          isFetching: false,\r\n          error: action.msg,\r\n        },\r\n      };\r\n\r\n    case gameTypes.FILTER_PLANETS:\r\n      return {\r\n        ...state,\r\n        filteredPlanets: filterPlanetsUtil(state.planets.value, action.payload),\r\n      };\r\n\r\n    case gameTypes.DISABLE_CORRESPONDING_VEHICLES:\r\n      return {\r\n        ...state,\r\n        filteredVehicles: disableVehiclesUtil(\r\n          action.selectorId,\r\n          action.payload,\r\n          state.filteredVehicles,\r\n          state.vehicles.value,\r\n          state.availableVehicleCount\r\n        ),\r\n      };\r\n\r\n    case gameTypes.CALCULATE_VEHICLE_COUNT:\r\n      return {\r\n        ...state,\r\n        availableVehicleCount: calculateVehicleCountUtil(\r\n          action.playerVehicles,\r\n          state.vehicles.value\r\n        ),\r\n      };\r\n\r\n    case gameTypes.RESET_GAME:\r\n      return INITIAL_STATE;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default gameReducer;\r\n","const playerTypes = {\r\n  ADD_PLANET :\"ADD_PLANET\",\r\n  ADD_VEHICLE:\"ADD_VEHICLE\",\r\n  RESET_PLAYER:\"RESET_PLAYER\"\r\n}\r\n\r\nexport default playerTypes","import playerTypes from \"./player.type\";\r\n\r\nconst INITIAL_STATE = {\r\n  selectedPlanets: {},\r\n  selectedVehicles: {},\r\n};\r\n\r\nconst playerReducer = (state = INITIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case playerTypes.ADD_PLANET:\r\n      return {\r\n        ...state,\r\n        selectedPlanets: {\r\n          ...state.selectedPlanets,\r\n          [action.selectorId]: action.payload,\r\n        },\r\n      };\r\n\r\n    case playerTypes.ADD_VEHICLE:\r\n      return {\r\n        ...state,\r\n        selectedVehicles: {\r\n          ...state.selectedVehicles,\r\n          [action.selectorId]: action.payload,\r\n        },\r\n      };\r\n\r\n    case playerTypes.RESET_PLAYER:\r\n      return INITIAL_STATE;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default playerReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport gameReducer from \"./game/game.reducer\";\r\nimport playerReducer from \"./player/player.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  game: gameReducer,\r\n  player: playerReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport { logger } from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\n\r\nimport rootReducer from \"./rootReducer\";\r\n\r\nconst middlewares = [thunk];\r\n\r\nif (process.env.NODE_ENV === \"development\") middlewares.push(logger);\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(...middlewares));\r\n","import axios from \"axios\";\r\n\r\nimport gameTypes from \"./game.type\";\r\n\r\nexport const startFilteringPlanets = (playerPlanets) => ({\r\n  type: gameTypes.FILTER_PLANETS,\r\n  payload: playerPlanets,\r\n});\r\n\r\nexport const startFetch = (requestType) => ({\r\n  type: gameTypes.START_FETCHING,\r\n  requestType: requestType,\r\n});\r\n\r\nexport const fetchSuccess = (requestType, payload) => ({\r\n  type: gameTypes.REQUEST_SUCCESS,\r\n  payload: payload,\r\n  requestType: requestType,\r\n});\r\n\r\nexport const fetchFail = (requestType, msg) => ({\r\n  type: gameTypes.REQUEST_FAIL,\r\n  requestType: requestType,\r\n  msg: msg,\r\n});\r\n\r\nexport const disableCorrespondingVehicles = (selectorId, planet) => ({\r\n  type: gameTypes.DISABLE_CORRESPONDING_VEHICLES,\r\n  payload: planet,\r\n  selectorId: selectorId,\r\n});\r\n\r\nexport const calculateVehicleCount = (selectorId, vehicle, playerVehicles) => ({\r\n  type: gameTypes.CALCULATE_VEHICLE_COUNT,\r\n  payload: vehicle,\r\n  selectorId: selectorId,\r\n  playerVehicles: playerVehicles,\r\n});\r\n\r\nexport const resetGame = () => ({\r\n  type: gameTypes.RESET_GAME,\r\n});\r\n\r\nexport const updateResult = (msg, error) => ({\r\n  type: gameTypes.UPDATE_RESULT,\r\n  payload: msg,\r\n  error: error,\r\n});\r\n\r\nconst fetchTokenAsync = () => {\r\n  return async (dispatch) => {\r\n    let requestType = \"token\";\r\n\r\n    try {\r\n      dispatch(startFetch(requestType));\r\n      let res = await axios.post(\"/token\");\r\n      dispatch(fetchSuccess(requestType, res.data.token));\r\n    } catch {\r\n      dispatch(\r\n        fetchFail(requestType, \"Something went wrong while fetching token\")\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nconst fetchPlanetsAsync = () => {\r\n  return async (dispatch) => {\r\n    let requestType = \"planets\";\r\n    try {\r\n      dispatch(startFetch(requestType));\r\n      let res = await axios.get(\"/planets\");\r\n      dispatch(fetchSuccess(requestType, res.data));\r\n    } catch {\r\n      dispatch(\r\n        fetchFail(requestType, \"Something went wrong while fetching Planets\")\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nconst fetchVehiclesAsync = () => {\r\n  return async (dispatch) => {\r\n    let requestType = \"vehicles\";\r\n    try {\r\n      dispatch(startFetch(requestType));\r\n      let res = await axios.get(\"/vehicles\");\r\n      dispatch(fetchSuccess(requestType, res.data));\r\n    } catch {\r\n      dispatch(\r\n        fetchFail(requestType, \"Something went wrong while fetching Vehicles.\")\r\n      );\r\n    }\r\n  };\r\n};\r\n\r\nexport const loadGame = () => {\r\n  return (dispatch) => {\r\n    dispatch(fetchTokenAsync());\r\n    dispatch(fetchPlanetsAsync());\r\n    dispatch(fetchVehiclesAsync());\r\n  };\r\n};\r\n","import { store } from \"../store\";\r\nimport playerTypes from \"./player.type\";\r\nimport {\r\n  startFilteringPlanets,\r\n  disableCorrespondingVehicles,\r\n  calculateVehicleCount,\r\n  resetGame,\r\n  loadGame,\r\n  startFetch,\r\n  fetchSuccess,\r\n  fetchFail,\r\n} from \"../game/game.action\";\r\nimport axios from \"axios\";\r\n\r\nexport const addPlanet = (selectorId, planet) => ({\r\n  type: playerTypes.ADD_PLANET,\r\n  payload: planet,\r\n  selectorId: selectorId,\r\n});\r\n\r\nexport const addVehicle = (selectorId, vehicle) => ({\r\n  type: playerTypes.ADD_VEHICLE,\r\n  payload: vehicle,\r\n  selectorId: selectorId,\r\n});\r\n\r\nexport const resetPlayer = () => ({\r\n  type: playerTypes.RESET_PLAYER,\r\n});\r\n\r\nexport const addPlanetStart = (selectorId, planet) => {\r\n  return (dispatch) => {\r\n    dispatch(addPlanet(selectorId, planet));\r\n    let selectedPlanetsValueFromStore = store.getState().player.selectedPlanets;\r\n    dispatch(startFilteringPlanets(selectedPlanetsValueFromStore));\r\n    dispatch(disableCorrespondingVehicles(selectorId, planet));\r\n  };\r\n};\r\n\r\nexport const addVehicleStart = (selectorId, vehicle) => {\r\n  return (dispatch) => {\r\n    dispatch(addVehicle(selectorId, vehicle));\r\n    dispatch(\r\n      calculateVehicleCount(\r\n        selectorId,\r\n        vehicle,\r\n        store.getState().player.selectedVehicles\r\n      )\r\n    );\r\n  };\r\n};\r\n\r\nexport const launchSearchAsync = (playerPlanets, playerVehicles) => {\r\n  return async (dispatch) => {\r\n    //resetting previous error and success messages\r\n    dispatch(fetchFail(\"result\", \"\"));\r\n    dispatch(fetchSuccess(\"result\", \"\"));\r\n    dispatch(startFetch(\"result\"));\r\n\r\n    let state = store.getState();\r\n    let token = state.game.token.value;\r\n    let { selectedPlanets, selectedVehicles } = state.player;\r\n\r\n    let planetsArray = mapObjectsToNamesUtil(Object.values(selectedPlanets));\r\n    let vehiclesArray = mapObjectsToNamesUtil(Object.values(selectedVehicles));\r\n\r\n    if (planetsArray.length !== 4 || vehiclesArray.length !== 4) {\r\n      dispatch(fetchFail(\"result\", \"Please select 4 planets and 4 vehicles\"));\r\n      return;\r\n    }\r\n    if (vehiclesArray.find((vehicle)=> Object.keys(vehicle).length === 0)) {\r\n      dispatch(fetchFail(\"result\", \"Please select 4 vehicles\"));\r\n      return;\r\n    }\r\n\r\n    let requestBody = {\r\n      token: token,\r\n      planet_names: planetsArray,\r\n      vehicle_names: vehiclesArray,\r\n    };\r\n\r\n    try {\r\n      let response = await axios.post(\"/find\", requestBody);\r\n      let responseMsg = \"\";\r\n      if (response.data.status === \"success\")\r\n        responseMsg = \"Congratulations! You found the queen on \" + response.data.planet_name + \".\";\r\n      else responseMsg = \"Shoot! It's a miss.\";\r\n      dispatch(fetchSuccess(\"result\", responseMsg));\r\n    } catch (error) {\r\n      dispatch(fetchFail(\"result\", \"Something went wrong. Please try again\"));\r\n    }\r\n  };\r\n};\r\n\r\nconst mapObjectsToNamesUtil = (selectedObject) => {\r\n  return selectedObject.map((object) => object.name);\r\n};\r\n\r\nexport const resetFullGame = () => {\r\n  return (dispatch) => {\r\n    dispatch(resetGame());\r\n    dispatch(resetPlayer());\r\n    dispatch(loadGame());\r\n  };\r\n};\r\n","import React from \"react\";\r\nimport \"./navbarMenu.style.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { resetFullGame } from \"../../redux/player/player.action\";\r\n\r\n// Menu in the header\r\nexport const NavbarMenu = ({ resetFullGame }) => {\r\n  return (\r\n    <ul className=\"navbar\">\r\n      <li onClick={resetFullGame}>Reset</li>\r\n    </ul>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  resetFullGame: () => dispatch(resetFullGame()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(NavbarMenu);\r\n","import React from \"react\";\r\nimport \"./header.style.scss\";\r\n\r\nimport { withRouter } from \"react-router\";\r\n\r\nimport NavbarMenu from \"../navbarMenu/navbarMenu.component\";\r\n\r\nconst Header = ({ history }) => (\r\n  <div className=\"header-wrapper\">\r\n    <header>\r\n      <h2 className=\"logo\" onClick={() => history.push(\"/\")}>\r\n        Flying Falcon\r\n      </h2>\r\n      <NavbarMenu />\r\n    </header>\r\n  </div>\r\n);\r\n\r\nexport default withRouter(Header);\r\n","import \"./footer.style.scss\";\r\n\r\nconst Footer = () => (\r\n  <div className=\"footer-wrapper\">\r\n    <footer>developed using React, Redux (2021)</footer>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectGame = (state) => state.game;\r\n\r\nexport const selectPlanets = createSelector(\r\n  [selectGame],\r\n  (game) => game.planets\r\n);\r\n\r\nexport const selectVehicles = createSelector(\r\n  [selectGame],\r\n  (game) => game.vehicles\r\n);\r\n\r\nexport const selectResult = createSelector(\r\n  [selectGame],\r\n  game => game.result\r\n)\r\n\r\nexport const selectFilteredPlanets = createSelector(\r\n  [selectGame],\r\n  (game) => game.filteredPlanets\r\n);\r\n\r\nexport const selectFilteredVehicles = createSelector(\r\n  [selectGame],\r\n  (game) => game.filteredVehicles\r\n);\r\n\r\nexport const selectVehicleCount = createSelector(\r\n  [selectGame],\r\n  (game) => game.vehicleCount\r\n);\r\n\r\nexport const selectAvailableVehicleCount = createSelector(\r\n  [selectGame],\r\n  (game) => game.availableVehicleCount\r\n);\r\n","import { createSelector } from \"reselect\";\r\n\r\nconst selectPlayer = (state) => state.player;\r\n\r\nexport const selectPlayerSelectedPlanets = createSelector(\r\n  [selectPlayer],\r\n  (player) => player.selectedPlanets\r\n);\r\n\r\nexport const selectPlayerSelectedVehicles = createSelector(\r\n  [selectPlayer],\r\n  (player) => player.selectedVehicles\r\n);\r\n\r\nexport const selectTimeTaken = createSelector([selectPlayer], (player) =>\r\n  calculateTimeTaken(player.selectedPlanets, player.selectedVehicles)\r\n);\r\n\r\nconst calculateTimeTaken = (planetsObject, vehiclesObject) => {\r\n  const planetKeys = Object.keys(planetsObject);\r\n  let totalTime = 0;\r\n\r\n  planetKeys.forEach((planetKey) => {\r\n    let distance = 0;\r\n    let speed = 1;\r\n    if (planetsObject[planetKey] && vehiclesObject[planetKey]) {\r\n      distance = planetsObject[planetKey].distance;\r\n      speed = vehiclesObject[planetKey].speed;\r\n    }\r\n\r\n    let timeTakenByThisSelectionPair = distance / speed;\r\n\r\n    totalTime += timeTakenByThisSelectionPair\r\n      ? timeTakenByThisSelectionPair\r\n      : 0;\r\n  });\r\n\r\n  return totalTime;\r\n};\r\n","import { useEffect } from \"react\";\r\nimport \"./planetSelector.style.scss\";\r\n\r\nimport { createStructuredSelector } from \"reselect\";\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { selectFilteredPlanets } from \"../../redux/game/game.selector\";\r\nimport { selectPlayerSelectedPlanets } from \"../../redux/player/player.selector\";\r\n\r\nimport {\r\n  addPlanetStart,\r\n  addVehicleStart,\r\n} from \"../../redux/player/player.action\";\r\n\r\n// Dropdown to select planets\r\nexport const PlanetSelector = ({\r\n  selectorId,\r\n  showVehicles,\r\n  setShowVehicles,\r\n  selectPlanets,\r\n  selectFilteredPlanets,\r\n  selectPlayerSelectedPlanets,\r\n  addPlanet,\r\n  addVehicle,\r\n}) => {\r\n  useEffect(() => {\r\n    if (selectPlayerSelectedPlanets[selectorId]) {\r\n      setShowVehicles(true);\r\n    } else {\r\n      setShowVehicles(false);\r\n    }\r\n  }, [showVehicles, selectPlayerSelectedPlanets, selectorId, setShowVehicles]);\r\n\r\n  let planetsValue = selectPlanets.value;\r\n\r\n  const selectionChangedHandler = (e) => {\r\n    e.preventDefault();\r\n    if (!showVehicles) {\r\n      setShowVehicles(true);\r\n    }\r\n\r\n    let planet = JSON.parse(e.target.value);\r\n    addPlanet(selectorId, planet);\r\n    addVehicle(selectorId);\r\n  };\r\n\r\n  // switch to selectFilteredPlanets if initial selection is made\r\n  // i.e. if selectFiltered planets is not empty\r\n  if (selectFilteredPlanets.length > 0) {\r\n    planetsValue = selectFilteredPlanets;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <select\r\n        onChange={selectionChangedHandler}\r\n        value={JSON.stringify(selectPlayerSelectedPlanets[selectorId])}\r\n        defaultValue=\"empty\"\r\n      >\r\n        <option disabled value=\"empty\">\r\n          -- Pick a Planet --\r\n        </option>\r\n        {planetsValue &&\r\n          planetsValue.map((planet) => (\r\n            <option key={planet.name} value={JSON.stringify(planet)}>\r\n              {planet.name}\r\n            </option>\r\n          ))}\r\n        {selectPlayerSelectedPlanets[selectorId] ? (\r\n          <option\r\n            value={JSON.stringify(selectPlayerSelectedPlanets[selectorId])}\r\n          >\r\n            {selectPlayerSelectedPlanets[selectorId].name}\r\n          </option>\r\n        ) : null}\r\n      </select>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectFilteredPlanets: selectFilteredPlanets,\r\n  selectPlayerSelectedPlanets: selectPlayerSelectedPlanets,\r\n});\r\n\r\n// The empty object in addVehicle will help us normalize count\r\n// in some edge cases. This empty object will become a placeholder\r\n// for playerSelectedVehicle with this instance's selectorId\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addPlanet: (selectorId, planet) => {\r\n    dispatch(addPlanetStart(selectorId, planet));\r\n  },\r\n  addVehicle: (selectorId) => dispatch(addVehicleStart(selectorId, {})),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(PlanetSelector);\r\n","import \"./vehicleSelector.style.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport {\r\n  selectFilteredVehicles,\r\n  selectAvailableVehicleCount,\r\n} from \"../../redux/game/game.selector\";\r\nimport { selectPlayerSelectedVehicles } from \"../../redux/player/player.selector\";\r\n\r\nimport { addVehicleStart } from \"../../redux/player/player.action\";\r\n\r\n//refer to test file to see the type of each prop value\r\nexport const VehicleSelector = ({\r\n  selectorId,\r\n  addVehicle,\r\n  selectVehicles,\r\n  selectFilteredVehicles,\r\n  selectPlayerSelectedVehicles,\r\n  selectAvailableVehicleCount,\r\n}) => {\r\n  const vehicleChangeHandler = (e) => {\r\n    let currVehicle = e.target.value;\r\n    addVehicle(selectorId, currVehicle ? JSON.parse(currVehicle) : null);\r\n  };\r\n\r\n  let vehiclesValue = selectVehicles.value;\r\n\r\n  if (selectFilteredVehicles[selectorId]) {\r\n    vehiclesValue = selectFilteredVehicles[selectorId];\r\n  }\r\n\r\n  const findCount = (currVehicle) => {\r\n    let foundVehicle = selectAvailableVehicleCount.find(\r\n      (vehicle) => vehicle.name === currVehicle.name\r\n    );\r\n    return foundVehicle ? foundVehicle.total_no : currVehicle.total_no;\r\n  };\r\n\r\n  const checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop = (vehicle) =>\r\n    (selectPlayerSelectedVehicles[selectorId] &&\r\n      vehicle.name === selectPlayerSelectedVehicles[selectorId].name) ||\r\n    false;\r\n\r\n  return (\r\n    <div className=\"vehicle-menu\">\r\n      <p>Who will go here?</p>\r\n      {vehiclesValue.map((vehicle, idx) => (\r\n        <div key={vehicle.name}>\r\n          <input\r\n            id={`veh${idx}${selectorId}`}\r\n            type=\"radio\"\r\n            name={`vehicle${selectorId}`}\r\n            value={JSON.stringify(vehicle)}\r\n            checked={\r\n              !vehicle.disabled &&\r\n              checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop(vehicle)\r\n            }\r\n            onChange={vehicleChangeHandler}\r\n            disabled={\r\n              (vehicle.disabled || findCount(vehicle) === 0) &&\r\n              !checkIfCurrentPlayerSelectedVehicleIsEqualToVehicleInLoop(\r\n                vehicle\r\n              )\r\n            }\r\n          />\r\n          <label htmlFor={`veh${idx}${selectorId}`}>{`${\r\n            vehicle.name\r\n          } (${findCount(vehicle)})`}</label>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectFilteredVehicles: selectFilteredVehicles,\r\n  selectPlayerSelectedVehicles: selectPlayerSelectedVehicles,\r\n  selectAvailableVehicleCount: selectAvailableVehicleCount,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addVehicle: (selectorId, currVehicle) =>\r\n    dispatch(addVehicleStart(selectorId, currVehicle)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(VehicleSelector);\r\n","import { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport PlanetSelector from \"../planetSelector/planetSelector.component\";\r\nimport VehicleSelector from \"../vehicleSelector/vehicleSelector.component\";\r\n\r\nimport { selectVehicles, selectPlanets } from \"../../redux/game/game.selector\";\r\n\r\n// wrapper for a single selection pair( planetSelector, vehicleSelector )\r\nconst SelectionHolder = ({ selectVehicles, selectPlanets, ...others }) => {\r\n  //UI related state is maintained in Components\r\n  let [showVehicles, setShowVehicles] = useState(false);\r\n\r\n  return (\r\n    <>\r\n      {selectPlanets.value.length !== 0 && (\r\n        <PlanetSelector\r\n          {...others}\r\n          showVehicles={showVehicles}\r\n          setShowVehicles={setShowVehicles}\r\n          selectPlanets={selectPlanets}\r\n        />\r\n      )}\r\n      {selectPlanets.value.length !== 0 && showVehicles && (\r\n        <VehicleSelector {...others} selectVehicles={selectVehicles} />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\n// listening to changes in orig vehicles and planets\r\n// so that this component can re-render and don't lead to\r\n// inconsistencies\r\nconst mapStateToProps = () =>\r\n  createStructuredSelector({\r\n    selectVehicles,\r\n    selectPlanets,\r\n  });\r\n\r\nexport default connect(mapStateToProps)(SelectionHolder);\r\n","import { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectTimeTaken } from \"../../redux/player/player.selector\";\r\n\r\nexport const ScoreDisplay = ({ selectTimeTaken }) => (\r\n  <>\r\n    Time Taken:\r\n    {selectTimeTaken ? selectTimeTaken : 0}\r\n  </>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectTimeTaken,\r\n});\r\n\r\nexport default connect(mapStateToProps)(ScoreDisplay);\r\n","import \"./msgBox.style.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport { selectResult } from \"../../redux/game/game.selector\";\r\n\r\n// The box below the Header\r\nexport const MsgBox = ({ selectResult }) => (\r\n  <div className=\"msg-offset\">\r\n    <div\r\n      className={`msg ${\r\n        selectResult.error === \"\" && selectResult.value.includes(\"found\")\r\n          ? \"green\"\r\n          : \"red\"\r\n      }`}\r\n    >\r\n      {selectResult.error !== \"\" ? selectResult.error : selectResult.value}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectResult,\r\n});\r\nexport default connect(mapStateToProps)(MsgBox);\r\n","import \"./gamepage.style.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport { createStructuredSelector } from \"reselect\";\r\n\r\nimport {\r\n  launchSearchAsync,\r\n  resetFullGame,\r\n} from \"../../redux/player/player.action\";\r\nimport SelectionHolder from \"../../components/selectionHolder/selectionHolder.component\";\r\nimport { selectResult } from \"../../redux/game/game.selector\";\r\n\r\nimport ScoreDisplay from \"../../components/scoreDisplay/scoreDisplay.component\";\r\nimport MsgBox from \"../../components/msgBox/msgBox.component\";\r\n\r\nconst Gamepage = ({ selectResult, launchSearchAsync, resetFullGame }) => {\r\n  const selectorIds = [1, 2, 3, 4];\r\n\r\n  return (\r\n    <>\r\n      <MsgBox />\r\n      <div className=\"gamepage\">\r\n        <div className=\"selectors\">\r\n          {selectorIds.map((selectorId) => (\r\n            <div key={selectorId}>\r\n              <SelectionHolder selectorId={selectorId} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n        <div className=\"score-display\">\r\n          <ScoreDisplay />\r\n        </div>\r\n        {selectResult.value === \"\" && (\r\n          <button\r\n            className=\"submit\"\r\n            onClick={launchSearchAsync}\r\n            disabled={selectResult.isFetching}\r\n          >\r\n            Deploy the troops\r\n          </button>\r\n        )}\r\n        {selectResult.value !== \"\" && (\r\n          <button className=\"submit\" onClick={resetFullGame}>\r\n            New Game?\r\n          </button>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  launchSearchAsync: () => dispatch(launchSearchAsync()),\r\n  resetFullGame: () => dispatch(resetFullGame()),\r\n});\r\n\r\nconst mapStateToProps = createStructuredSelector({\r\n  selectResult,\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Gamepage);\r\n","import \"./homepage.style.scss\";\r\n\r\nconst Homepage = ({ history }) => (\r\n  <div className=\"homepage\">\r\n    <p>\r\n      <span>In the distant distant galaxy of Tara B.</span>\r\n      <span>\r\n        After the recent war with neighbouring planet Falicornia, King Shan has\r\n        exiled the Queen of Falicornia for 15 years.\r\n      </span>\r\n      Queen Al Falcone is now in hiding. But if King Shan can find her before\r\n      the years are up, she will be exiled for another 15 years…\r\n    </p>\r\n    <p>\r\n      King Shan has received intelligence that Al Falcone is in hiding in one of\r\n      these 6 planets - DonLon, Enchai, Jebing, Sapir, Lerbin and Pingasor.\r\n      However he has limited resources at his disposal and can send his army to\r\n      only 4 of these planets.\r\n    </p>\r\n    <p>\r\n      <span>Now pick a side, Traveller.</span>\r\n      <span className=\"link marginTop\" onClick={() => history.push(\"game\")}>\r\n        Find the Queen, and put her before the rotten King\r\n      </span>\r\n      or\r\n      <span\r\n        className=\"link\"\r\n        onClick={() => {\r\n          history.push(\"goodbye\");\r\n        }}\r\n      >\r\n        Let the Queen live happily in the hiding\r\n      </span>\r\n    </p>\r\n  </div>\r\n);\r\n\r\nexport default Homepage;\r\n","import \"./App.style.scss\";\r\n\r\nimport { connect } from \"react-redux\";\r\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\r\n\r\nimport Header from \"./components/header/header.component\";\r\nimport Footer from \"./components/footer/footer.component\";\r\n\r\nimport Gamepage from \"./pages/gamePage/gamepage.page\";\r\nimport Homepage from \"./pages/homePage/homepage.page\";\r\n\r\nimport { loadGame } from \"./redux/game/game.action\";\r\n\r\nconst App = ({ loadGame }) => {\r\n  loadGame();\r\n  return (\r\n    <>\r\n      <HashRouter>\r\n        <Header />\r\n        <Switch>\r\n          <Route exact path=\"/\" component={Homepage} />\r\n          <Route exact path=\"/game\" component={Gamepage} />\r\n          <Route\r\n            exact\r\n            path=\"/goodbye\"\r\n            render={() => (\r\n              <h2 className=\"misc-messages\">\r\n                You made the right decision, me friend.\r\n                <span />\r\n                Now go, Shoo...\r\n              </h2>\r\n            )}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"*\"\r\n            render={() => (\r\n              <h2 className=\"misc-messages\">You seem to be lost, me friend</h2>\r\n            )}\r\n          />\r\n        </Switch>\r\n        <Footer />\r\n      </HashRouter>\r\n    </>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  loadGame: () => dispatch(loadGame()),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(App);\r\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport axios from \"axios\";\n\nimport { store } from \"./redux/store\";\n\naxios.defaults.baseURL = \"https://findfalcone.herokuapp.com/\";\naxios.defaults.headers.common[\"Accept\"] = \"application/json\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}